{
    "katas": [
        {
            "id": 1,
            "name": "Apply a minimal CSS Reset",
            "steps": [
                {
                    "name": "1. Reset box sizing",
                    "solution": {
                        "code": "*, *::before, *::after { box-sizing: border-box; }",
                        "language": "css"
                    },
                    "questions": [
                        {
                            "question": "What is `box-sizing`? What are the alternatives? What is the default?",
                            "answer": "`box-sizing` determines what is influenced by `width` and `height` properties. `border-box` includes borders and padding (whereas the default `content-box` will not include them)."
                        },
                        {
                            "question": "Why do we need the `::before` and `::after` pseudo-elements?",
                            "answer": "These pseudo-elements control the content **inside** the tags but **before / after** the actual content. __*but why do we need them?*__‚ùå"
                        }
                    ]
                },
                {
                    "name": "2. Make multimedia responsive",
                    "hints": [
                        "**I** **p**lay **s**ome **video**games"
                    ],
                    "solution": {
                        "code": "img, picture, svg, video { display: block; max-width: 100%; }",
                        "language": "css"
                    },
                    "questions": [
                        {
                            "question": "Why do we need `display: block`? What's the default?",
                            "answer": "`display: block` starts on a new line, taking up the whole width. Otherwise they default to `inline` (current line, `width` and `height` have no effect)."
                        }
                    ]
                },
                {
                    "name": "3. Make all text inherit the font",
                    "hints": [
                        "_**I** **t**ry **b**efore **sel**ling_"
                    ],
                    "solution": {
                        "code": "input, textarea, button, select { font: inherit; }",
                        "language": "css"
                    }
                }
            ]
        },
        {
            "id": 2,
            "name": "Align target <h1> to the center of the page",
            "steps": [
                {
                    "name": "1. Make the body page-wide",
                    "solution": {
                        "code": "html, body { margin: 0px; min-height: 100vh; }",
                        "language": "css"
                    }
                },
                {
                    "name": "2. Center <h1> using the classic (transform) method",
                    "solution": {
                        "code": "h1 { margin: 0px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }",
                        "language": "css"
                    }
                },
                {
                    "name": "3. Center <h1> using the Flexbox method",
                    "solution": {
                        "code": "body { display: flex; align-items: center; justify-content: center; }",
                        "language": "css"
                    }
                },
                {
                    "name": "4. Center <h1> using the Grid system",
                    "solution": {
                        "code": "body { display: grid; place-items: center; }",
                        "language": "css"
                    }
                }
            ]
        },
        {
            "id": 3,
            "name": "Apply an extensive CSS Reset",
            "steps": [
                {
                    "name": "1. Reset box sizing",
                    "solution": {
                        "code": "*, *::before, *::after { box-sizing: border-box; }",
                        "language": "css"
                    }
                },
                {
                    "name": "2. Remove default margins, paddings & font styling",
                    "solution": {
                        "code": "* { margin: 0; padding: 0; font: inherit; }",
                        "language": "css"
                    }
                },
                {
                    "name": "3. Set a default darkmode",
                    "solution": {
                        "code": "html { color-scheme: dark light; }",
                        "language": "css"
                    },
                    "questions": [
                        {
                            "question": "What other options do I have with `color-scheme`?",
                            "answer": "`normal`: use browser defaults. `light`: use OS light scheme. `dark`: use OS dark scheme."
                        }
                    ]
                },
                {
                    "name": "4. Set fullscreen body",
                    "solution": {
                        "code": "body { min-height: 100vh; }",
                        "language": "css"
                    }
                },
                {
                    "name": "5. Make multimedia responsive",
                    "hints": [
                        "**I** **p**lay **s**ome **video**games"
                    ],
                    "solution": {
                        "code": "img, picture, svg, video { display: block; max-width: 100%; }",
                        "language": "css"
                    }
                }
            ]
        },
        {
            "id": 4,
            "name": "Create a responsive navbar",
            "source": {
                "title": "Kevin Powell - Create a responsive navigation nav with no JS!",
                "url": "https://www.youtube.com/watch?v=8QKOaTYvYUA"
            },
            "steps": [
                {
                    "name": "1. Create an header with an h1 for the logo (a placeholder text of  \"Logo\" will be fine)",
                    "solution": {
                        "code": "<header>\n\t<h1 class=\"logo\">Logo</h1>\n</header>",
                        "language": "html"
                    },
                    "hints": [
                        "**Emmet:** `header>h1.logo{Logo}`"
                    ]
                },
                {
                    "name": "2. Put the actual navigation element after the h1 with four links (#; Home, About, Blog, Contact)",
                    "solution": {
                        "code": "\t<nav>\n\t\t<ul>\n\t\t\t<li><a href=\"#\">Home</a></li>\n\t\t\t<li><a href=\"#\">About</a></li>\n\t\t\t<li><a href=\"#\">Blog</a></li>\n\t\t\t<li><a href=\"#\">Contact</a></li>\n\t\t</ul>\n\t</nav>\n\n</header>",
                        "language": "html"
                    },
                    "hints": [
                        "**Emmet:** `nav>ul>(li>a[href=\"#\"]{Home})+(li>a[href=\"#\"]{About})+(li>a[href=\"#\"]{Blog})+(li>a[href=\"#\"]{Contact})`"
                    ]
                },
                {
                    "name": "3. Import font by CSS (https://fonts.googleapis.com/css?family=Work+Sans:300,600)",
                    "solution": {
                        "code": "@import url('https://fonts.googleapis.com/css?family=Work+Sans:300,600');",
                        "language": "css"
                    },
                    "questions": [
                        {
                            "question": "What other options do I have with `color-scheme`?",
                            "answer": "`normal`: use browser defaults. `light`: use OS light scheme. `dark`: use OS dark scheme."
                        }
                    ]
                },
                {
                    "name": "4. Setup a `background` variable for the CSS (rgba(0, 214, 170, .85))",
                    "solution": {
                        "code": ":root { --background: rgba(0, 214, 170, .85); }",
                        "language": "css"
                    },
                    "questions": [
                        {
                            "question": "What is the `:root` pseudo-selector? Why do we need it here?",
                            "answer": "Variables in CSS can't be declared on their own. They need to be linked to something. The `:root` pseudo-selector selects the highest level in the document (usually `<html>`), making the variables declared inside available everywhere."
                        }
                    ]
                },
                {
                    "name": "5. Reset `box-sizing`",
                    "solution": {
                        "code": "*, *::before, *::after { box-sizing: border-box; }",
                        "language": "css"
                    }
                },
                {
                    "name": "6. Setup body according to the following specification",
                    "hints": [
                        "No margin",
                        "A background color of #222",
                        "'Work Sans' (or fallback sans) with 400 weight"
                    ],
                    "solution": {
                        "code": "body {\n\tmargin: 0px;\n\tbackground: #222;\n\tfont-family: 'Work Sans', sans-serif;\n\tfont-weight: 400;\n}",
                        "language": "css"
                    }
                },
                {
                    "name": "7. Set the navigation styles section of the CSS document & set header to background variable",
                    "solution": {
                        "code": "/* Navigation styles start here */\n\nheader {\n\tbackground: var(--background);\n}",
                        "language": "css"
                    }
                },
                {
                    "name": "8. Mobile-first: set the header elements at the center, always on top and prevent from scrolling away",
                    "solution": {
                        "code": "header {\n\tbackground: var(--background);\n\ttext-align: center;\n\tpoisition: fixed;\n\tz-index: 999;\n\twidth: 100%;\n}",
                        "language": "css"
                    }
                },
                {
                    "name": "9. Put all nav elements always on the left, immediately below the header. Preserve background & stretch to width",
                    "solution": {
                        "code": "nav {\n\tposition: absolute;\n\ttext-align: left;\n\ttop: 100%;\n\tleft: 0;\n\tbackground: var(--background);\n\twidth: 100%;\n}",
                        "language": "css"
                    },
                    "questions": [
                        {
                            "question": "Why do we place these elements below the header?",
                            "answer": "Imagine the usual mobile hamburger menu. That's where they'll eventually be when opened."
                        }
                    ]
                },
                {
                    "name": "10. Remove default spacings & bullet points from the navigation list (only)",
                    "solution": {
                        "code": "nav ul {\n\tmargin: 0;\n\tpadding: 0;\n\tlist-style: none;\n}",
                        "language": "css"
                    }
                }
            ]
        }
    ]
}